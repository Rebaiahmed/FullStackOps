# .github/workflows/ci.yml
name: CI

on:
  push:
    branches:
      - main # Or your primary branch like 'master', 'develop'
  pull_request:
    branches:
      - main # Or your primary branch
  workflow_dispatch: # Allows manual trigger from GitHub Actions UI

permissions:
  actions: read
  contents: read # Required to checkout code

jobs:
  # This job sets up the environment and installs dependencies.
  # Other jobs will depend on this one to restore the environment.
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout Nx Monorepo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Crucial for Nx affected commands to work correctly

      - name: 📐 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn' # Use yarn for caching, matching your usage

      - name: 📦 Cache Node Modules and Nx
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            .yarn/cache
            .nx/cache # Cache the Nx local cache for faster runs
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: 🧹 Clean and Install Dependencies
        run: |
          rm -rf node_modules # Ensure a clean install if cache is stale
          yarn install --frozen-lockfile
          yarn cypress install --force # Install Cypress binaries
        env:
          NPM_CONFIG_unsafe_perm: "true"

      # No need to run nx-set-shas here and output it.
      # Each subsequent job will run it itself to set env vars.

  lint:
    runs-on: ubuntu-latest
    needs: setup # This job depends on the 'setup' job
    steps:
      - name: ⬇️ Checkout Nx Monorepo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📐 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'

      - name: 📦 Restore Node Modules and Nx Cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            .yarn/cache
            .nx/cache
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: ⚡ Set Nx Base/Head SHAs for Lint
        # Run this action in each job that uses 'nx affected'
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: main

      - name: 🧹 Run Lint for Affected Projects
        run: |
          npx nx affected --target=lint --parallel=3
          npx nx format:check # Assuming you have this target or use a direct command

  unit-test:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: ⬇️ Checkout Nx Monorepo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📐 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'

      - name: 📦 Restore Node Modules and Nx Cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            .yarn/cache
            .nx/cache
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: ⚡ Set Nx Base/Head SHAs for Test
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: main

      - name: 🧪 Run Unit Tests for Affected Projects
        run: npx nx affected --target=test --parallel=2

  build:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: ⬇️ Checkout Nx Monorepo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📐 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'

      - name: 📦 Restore Node Modules and Nx Cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            .yarn/cache
            .nx/cache
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: ⚡ Set Nx Base/Head SHAs for Build
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: main

      - name: 🏗️ Build All Affected Projects (Development)
        run: npx nx affected --target=build --parallel=2

  build-production:
    runs-on: ubuntu-latest
    needs: build # Depends on the regular build job passing
    steps:
      - name: ⬇️ Checkout Nx Monorepo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📐 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'

      - name: 📦 Restore Node Modules and Nx Cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            .yarn/cache
            .nx/cache
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: ⚡ Set Nx Base/Head SHAs for Production Build
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: main

      - name: 🏗️ Build All Affected Projects (Production)
        run: npx nx affected --target=build --configuration=production --parallel=1

  e2e:
    runs-on: ubuntu-latest
    needs: build # E2E tests usually require built applications
    timeout-minutes: 15
    steps:
      - name: ⬇️ Checkout Nx Monorepo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📐 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'

      - name: 📦 Restore Node Modules and Nx Cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            .yarn/cache
            .nx/cache
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: ⚡ Set Nx Base/Head SHAs for E2E
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: main

      - name: 🌍 Run E2E Tests for Affected Projects
        run: npx nx affected --target=e2e --parallel=1
        continue-on-error: true

  e2e-specific-browsers:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        project:
          - full-stack-ops-monorepo-e2e
          # Add other e2e projects here if they have specific browser requirements
          # - my-vue-app-e2e
        browser:
          - chrome
          - firefox
    steps:
      - name: ⬇️ Checkout Nx Monorepo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📐 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'

      - name: 📦 Restore Node Modules and Nx Cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            .yarn/cache
            .nx/cache
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: ⚡ Set Nx Base/Head SHAs
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: main

      - name: 🌍 Run E2E for ${{ matrix.project }} on ${{ matrix.browser }}
        # Note: We need to re-evaluate affected here because the matrix job is independent
        # and doesn't directly use the `setup` job's affected context in the same way.
        # This will check if the specific project is affected within THIS job's context.
        run: |
          # Use npx nx affected --target=e2e --plain to get a list of affected projects.
          # Then check if the matrix.project is in that list.
          if npx nx affected --target=e2e --plain | grep -q "${{ matrix.project }}"; then
            echo "Running E2E for ${{ matrix.project }} on ${{ matrix.browser }}"
            npx nx run ${{ matrix.project }}:e2e --browser ${{ matrix.browser }}
          else
            echo "${{ matrix.project }} is not affected. Skipping browser-specific E2E tests."
          fi
