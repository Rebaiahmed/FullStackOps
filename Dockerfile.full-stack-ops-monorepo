# Dockerfile.full-stack-ops-monorepo at the root of your monorepo

####################
# BUILDER STAGE
####################
FROM node:20-alpine AS builder

# Set working directory for the builder stage
WORKDIR /app

# Copy lock file and package.json first to leverage Docker cache
# This ensures a faster rebuild if only source code changes, but dependencies don't.
COPY package.json yarn.lock ./
# Copy nx.json and tsconfig.base.json for Nx to resolve paths
COPY nx.json tsconfig.base.json ./
# Copy all project related files (apps, libs, tools)
COPY apps apps/
COPY libs libs/
COPY tools tools/

# Install root-level dependencies
RUN yarn install --frozen-lockfile --network-timeout 100000

# Build the specific Angular/Full-Stack Frontend application
# Assuming 'full-stack-ops-monorepo' has a 'build' target that outputs to 'dist/apps/full-stack-ops-monorepo'
RUN npx nx build full-stack-ops-monorepo --configuration=production

####################
# RUNNER STAGE
####################
# Use a lightweight Nginx image to serve the static frontend app
FROM nginx:alpine AS runner

# Copy the Nginx configuration file
# Assuming you have a 'nginx.conf' file at the monorepo root
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Copy the built application from the builder stage to Nginx's static files directory
# The path is relative to the root of the Nx monorepo (which is /app in the builder)
COPY --from=builder /app/dist/apps/full-stack-ops-monorepo /usr/share/nginx/html/full-stack-ops-monorepo

# Expose the default Nginx port
EXPOSE 80

# Command to start Nginx (default for nginx:alpine image)
CMD ["nginx", "-g", "daemon off;"]
